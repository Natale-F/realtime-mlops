[project]
name = "realtime-mlops"
version = "1.0.0"
description = "Real-time MLOps platform for datacenter monitoring and anomaly detection"
authors = [{name = "Natale"}]
requires-python = ">=3.12"
dependencies = [
    "structlog>=23.1.0",
    "python-dotenv>=1.0.0",
    "kafka-python>=2.0.2",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.5.0",
]

[tool.ruff]
# Set the maximum line length to 100.
line-length = 100

# Python 3.12+
target-version = "py312"

# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by line-length)
    "B008",  # Do not perform function calls in argument defaults
]

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "*.egg-info",
    "build",
    "dist",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = true

[[tool.mypy.overrides]]
module = [
    "kafka.*",
    "structlog.*",
    "src.core.logger",
]
ignore_missing_imports = true
ignore_errors = true

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_backend"
