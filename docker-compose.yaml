services:
  # Zookeeper - Mandatory for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - mlops-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB Database (PostgreSQL + time-series extension)
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: postgres
    environment:
      POSTGRES_USER: mlops
      POSTGRES_PASSWORD: mlops_password
      POSTGRES_DB: mlops_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlops -d mlops_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Event Generator
  generator:
    build:
      context: .
      dockerfile: Dockerfile
    image: realtime-mlops:latest
    container_name: generator
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: datacenter-metrics
      LOG_LEVEL: INFO
    command: ["python", "-m", "src.generator.generate", "--config", "normal", "--kafka-servers", "kafka:29092"]
    networks:
      - mlops-network
    restart: unless-stopped

  # Storage Consumer - Kafka to PostgreSQL ingestion
  storage-consumer:
    image: realtime-mlops:latest
    container_name: storage-consumer
    depends_on:
      generator:
        condition: service_started
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: datacenter-metrics
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: mlops_db
      POSTGRES_USER: mlops
      POSTGRES_PASSWORD: mlops_password
      LOG_LEVEL: INFO
    command: ["python", "-m", "src.consumers.storage.consume", "--kafka-servers", "kafka:29092", "--postgres-host", "postgres"]
    networks:
      - mlops-network
    restart: unless-stopped

  # Kafka UI (optional but very useful for debugging)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - mlops-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: ""
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - mlops-network

networks:
  mlops-network:
    driver: bridge

volumes:
  postgres_data:
  grafana_data: